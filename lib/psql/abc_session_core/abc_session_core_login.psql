/**
 * Marks a user as successfully logged-in in the current session.
 *
 * @param p_cmp_id            The ID of the company (safeguard).
 * @param p_ses_id            The ID of the session.
 * @param p_usr_id            The ID of the user.
 * @param p_ses_session_token The new session token.
 * @param p_ses_csrf_token    The new CSRF token.
 *
 * @type row1
 */
create procedure abc_session_core_login
(
  in p_cmp_id            smallint(5) unsigned, --            type: ABC_AUTH_SESSION.cmp_id
  in p_ses_id            int(10) unsigned, --                type: ABC_AUTH_SESSION.ses_id
  in p_usr_id            int(10) unsigned, --                type: ABC_AUTH_SESSION.usr_id
  in p_ses_session_token varchar(64) character set ascii, -- type: ABC_AUTH_SESSION.ses_session_token
  in p_ses_csrf_token    varchar(64) character set ascii --  type: ABC_AUTH_SESSION.ses_csrf_token
)
  modifies sql data
begin
  declare l_lan_id tinyint(3) unsigned; -- type: ABC_AUTH_USER.lan_id

  select lan_id
  into l_lan_id
  from ABC_AUTH_USER
  where usr_id = p_usr_id
    and cmp_id = p_cmp_id;

  delete
  from ABC_AUTH_SESSION_NAMED_LOCK
  where ses_id = p_ses_id
    and cmp_id = p_cmp_id;

  delete
  from ABC_AUTH_SESSION_NAMED
  where ses_id = p_ses_id
    and cmp_id = p_cmp_id;

  update ABC_AUTH_SESSION
  set lan_id                = l_lan_id,
      usr_id                = p_usr_id,
      ses_session_token     = p_ses_session_token,
      ses_csrf_token        = p_ses_csrf_token,
      ses_has_flash_message = 0,
      ses_data              = null
  where ses_id = p_ses_id
    and cmp_id = p_cmp_id;

  -- Prevent logging updates of column usr_last_login.
  set @abc_g_skip_abc_auth_user = 1;

  update ABC_AUTH_USER
  set usr_last_login = now()
  where usr_id = p_usr_id;

  set @abc_g_skip_abc_auth_user = null;

  call abc_session_core_get_session(p_cmp_id, p_ses_session_token);
end
